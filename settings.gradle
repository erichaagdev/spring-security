pluginManagement {
	repositories {
		gradlePluginPortal()
	}
}

plugins {
	id "com.gradle.enterprise" version "3.12.6"
//	id "io.spring.ge.conventions" version "0.0.15"
}

def isCI = System.getenv('GITHUB_ACTIONS') != null

gradleEnterprise {
	server = "https://ge.solutions-team.gradle.com"
	buildScan {
		capture { taskInputFiles = true }
		uploadInBackground = !isCI
		publishAlways()
		publishIfAuthenticated()
		obfuscation {
			ipAddresses { addresses -> addresses.collect { address -> "0.0.0.0"} }
		}
	}
}

buildCache {
	local {
		enabled = true
	}

	remote(gradleEnterprise.buildCache) {
		enabled = true
		// Check access key presence to avoid build cache errors on PR builds when access key is not present
		def accessKey = System.getenv("GRADLE_ENTERPRISE_ACCESS_KEY")
		push = isCI && accessKey
	}
}

dependencyResolutionManagement {
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/milestone" }
	}
}

rootProject.name = 'spring-security'

FileTree buildFiles = fileTree(rootDir) {
	List excludes = gradle.startParameter.projectProperties.get("excludeProjects")?.split(",")
	include '**/*.gradle', '**/*.gradle.kts'
	exclude 'build', '**/gradle', 'settings.gradle', 'buildSrc', '/build.gradle', '.*', 'out'
	exclude '**/grails3'
	if(excludes) {
		exclude excludes
	}
}

String rootDirPath = rootDir.absolutePath + File.separator
buildFiles.each { File buildFile ->

	boolean isDefaultName = 'build.gradle'.equals(buildFile.name)
	boolean isKotlin = buildFile.name.endsWith(".kts")
	if(isDefaultName) {
		String buildFilePath = buildFile.parentFile.absolutePath
		String projectPath = buildFilePath.replace(rootDirPath, '').replace(File.separator, ':')
		include projectPath
	} else {
		String projectName
		if (isKotlin) {
			projectName = buildFile.name.replace('.gradle.kts', '')
		} else {
		 	projectName = buildFile.name.replace('.gradle', '')
		}
		String projectPath = ':' + projectName;
		include projectPath
		def project = findProject("${projectPath}")
		project.name = projectName
		project.projectDir = buildFile.parentFile
		project.buildFileName = buildFile.name
	}
}
